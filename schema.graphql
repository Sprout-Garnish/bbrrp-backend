# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  nickname: String
  isAdmin: Boolean
  phone: String
  email: String
  password: PasswordState
  role: UserRoleType
  restaurants(
    where: RestaurantWhereInput! = {}
    orderBy: [RestaurantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Restaurant!]
  restaurantsCount(where: RestaurantWhereInput! = {}): Int
  reservations(
    where: ReservationWhereInput! = {}
    orderBy: [ReservationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Reservation!]
  reservationsCount(where: ReservationWhereInput! = {}): Int
  bookmarks(
    where: RestaurantWhereInput! = {}
    orderBy: [RestaurantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Restaurant!]
  bookmarksCount(where: RestaurantWhereInput! = {}): Int
  reviews(
    where: ReviewWhereInput! = {}
    orderBy: [ReviewOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Review!]
  reviewsCount(where: ReviewWhereInput! = {}): Int
}

type PasswordState {
  isSet: Boolean!
}

enum UserRoleType {
  Customer
  Owner
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  nickname: StringFilter
  isAdmin: BooleanFilter
  phone: StringFilter
  email: StringFilter
  role: UserRoleTypeNullableFilter
  restaurants: RestaurantManyRelationFilter
  reservations: ReservationManyRelationFilter
  bookmarks: RestaurantManyRelationFilter
  reviews: ReviewManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserRoleTypeNullableFilter {
  equals: UserRoleType
  in: [UserRoleType!]
  notIn: [UserRoleType!]
  not: UserRoleTypeNullableFilter
}

input RestaurantManyRelationFilter {
  every: RestaurantWhereInput
  some: RestaurantWhereInput
  none: RestaurantWhereInput
}

input ReservationManyRelationFilter {
  every: ReservationWhereInput
  some: ReservationWhereInput
  none: ReservationWhereInput
}

input ReviewManyRelationFilter {
  every: ReviewWhereInput
  some: ReviewWhereInput
  none: ReviewWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  nickname: OrderDirection
  isAdmin: OrderDirection
  phone: OrderDirection
  email: OrderDirection
  role: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  nickname: String
  isAdmin: Boolean
  phone: String
  email: String
  password: String
  role: UserRoleType
  restaurants: RestaurantRelateToManyForUpdateInput
  reservations: ReservationRelateToManyForUpdateInput
  bookmarks: RestaurantRelateToManyForUpdateInput
  reviews: ReviewRelateToManyForUpdateInput
}

input RestaurantRelateToManyForUpdateInput {
  disconnect: [RestaurantWhereUniqueInput!]
  set: [RestaurantWhereUniqueInput!]
  create: [RestaurantCreateInput!]
  connect: [RestaurantWhereUniqueInput!]
}

input ReservationRelateToManyForUpdateInput {
  disconnect: [ReservationWhereUniqueInput!]
  set: [ReservationWhereUniqueInput!]
  create: [ReservationCreateInput!]
  connect: [ReservationWhereUniqueInput!]
}

input ReviewRelateToManyForUpdateInput {
  disconnect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  create: [ReviewCreateInput!]
  connect: [ReviewWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  nickname: String
  isAdmin: Boolean
  phone: String
  email: String
  password: String
  role: UserRoleType
  restaurants: RestaurantRelateToManyForCreateInput
  reservations: ReservationRelateToManyForCreateInput
  bookmarks: RestaurantRelateToManyForCreateInput
  reviews: ReviewRelateToManyForCreateInput
}

input RestaurantRelateToManyForCreateInput {
  create: [RestaurantCreateInput!]
  connect: [RestaurantWhereUniqueInput!]
}

input ReservationRelateToManyForCreateInput {
  create: [ReservationCreateInput!]
  connect: [ReservationWhereUniqueInput!]
}

input ReviewRelateToManyForCreateInput {
  create: [ReviewCreateInput!]
  connect: [ReviewWhereUniqueInput!]
}

type Restaurant {
  id: ID!
  name: String
  description: String
  locationRaw: String
  location: location
  category: String
  owner: User
  reservationPrice: Float
  info: String
  images(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  imagesCount(where: ImageWhereInput! = {}): Int
  reviews(
    where: ReviewWhereInput! = {}
    orderBy: [ReviewOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Review!]
  reviewsCount(where: ReviewWhereInput! = {}): Int
}

type location {
  lat: Float
  lng: Float
}

input RestaurantWhereUniqueInput {
  id: ID
}

input RestaurantWhereInput {
  AND: [RestaurantWhereInput!]
  OR: [RestaurantWhereInput!]
  NOT: [RestaurantWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  locationRaw: StringFilter
  category: StringFilter
  owner: UserWhereInput
  reservationPrice: FloatFilter
  info: StringFilter
  images: ImageManyRelationFilter
  reviews: ReviewManyRelationFilter
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input ImageManyRelationFilter {
  every: ImageWhereInput
  some: ImageWhereInput
  none: ImageWhereInput
}

input RestaurantOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  locationRaw: OrderDirection
  category: OrderDirection
  reservationPrice: OrderDirection
  info: OrderDirection
}

input RestaurantUpdateInput {
  name: String
  description: String
  locationRaw: String
  category: String
  owner: UserRelateToOneForUpdateInput
  reservationPrice: Float
  info: String
  images: ImageRelateToManyForUpdateInput
  reviews: ReviewRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input ImageRelateToManyForUpdateInput {
  disconnect: [ImageWhereUniqueInput!]
  set: [ImageWhereUniqueInput!]
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

input RestaurantUpdateArgs {
  where: RestaurantWhereUniqueInput!
  data: RestaurantUpdateInput!
}

input RestaurantCreateInput {
  name: String
  description: String
  locationRaw: String
  category: String
  owner: UserRelateToOneForCreateInput
  reservationPrice: Float
  info: String
  images: ImageRelateToManyForCreateInput
  reviews: ReviewRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input ImageRelateToManyForCreateInput {
  create: [ImageCreateInput!]
  connect: [ImageWhereUniqueInput!]
}

type Image {
  id: ID!
  name: String
  description: String
  image: ImageFieldOutput
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input ImageWhereUniqueInput {
  id: ID
}

input ImageWhereInput {
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
}

input ImageOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
}

input ImageUpdateInput {
  name: String
  description: String
  image: ImageFieldInput
}

input ImageFieldInput {
  upload: Upload!
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input ImageUpdateArgs {
  where: ImageWhereUniqueInput!
  data: ImageUpdateInput!
}

input ImageCreateInput {
  name: String
  description: String
  image: ImageFieldInput
}

type Reservation {
  id: ID!
  time: DateTime
  reservationFee: Int
  refund: Int
  user: User
  restaurant: Restaurant
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input ReservationWhereUniqueInput {
  id: ID
}

input ReservationWhereInput {
  AND: [ReservationWhereInput!]
  OR: [ReservationWhereInput!]
  NOT: [ReservationWhereInput!]
  id: IDFilter
  time: DateTimeFilter
  reservationFee: IntFilter
  refund: IntNullableFilter
  user: UserWhereInput
  restaurant: RestaurantWhereInput
}

input DateTimeFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input ReservationOrderByInput {
  id: OrderDirection
  time: OrderDirection
  reservationFee: OrderDirection
  refund: OrderDirection
}

input ReservationUpdateInput {
  time: DateTime
  reservationFee: Int
  refund: Int
  user: UserRelateToOneForUpdateInput
  restaurant: RestaurantRelateToOneForUpdateInput
}

input RestaurantRelateToOneForUpdateInput {
  create: RestaurantCreateInput
  connect: RestaurantWhereUniqueInput
  disconnect: Boolean
}

input ReservationUpdateArgs {
  where: ReservationWhereUniqueInput!
  data: ReservationUpdateInput!
}

input ReservationCreateInput {
  time: DateTime
  reservationFee: Int
  refund: Int
  user: UserRelateToOneForCreateInput
  restaurant: RestaurantRelateToOneForCreateInput
}

input RestaurantRelateToOneForCreateInput {
  create: RestaurantCreateInput
  connect: RestaurantWhereUniqueInput
}

type Review {
  id: ID!
  user: User
  images(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  imagesCount(where: ImageWhereInput! = {}): Int
  timestamp: DateTime
  edited: Boolean
  title: String
  content: String
  likes: Int
  restaurant: Restaurant
}

input ReviewWhereUniqueInput {
  id: ID
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
  id: IDFilter
  user: UserWhereInput
  images: ImageManyRelationFilter
  timestamp: DateTimeNullableFilter
  edited: BooleanFilter
  title: StringFilter
  content: StringFilter
  likes: IntNullableFilter
  restaurant: RestaurantWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input ReviewOrderByInput {
  id: OrderDirection
  timestamp: OrderDirection
  edited: OrderDirection
  title: OrderDirection
  content: OrderDirection
  likes: OrderDirection
}

input ReviewUpdateInput {
  user: UserRelateToOneForUpdateInput
  images: ImageRelateToManyForUpdateInput
  timestamp: DateTime
  edited: Boolean
  title: String
  content: String
  likes: Int
  restaurant: RestaurantRelateToOneForUpdateInput
}

input ReviewUpdateArgs {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateInput!
}

input ReviewCreateInput {
  user: UserRelateToOneForCreateInput
  images: ImageRelateToManyForCreateInput
  timestamp: DateTime
  edited: Boolean
  title: String
  content: String
  likes: Int
  restaurant: RestaurantRelateToOneForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createRestaurant(data: RestaurantCreateInput!): Restaurant
  createRestaurants(data: [RestaurantCreateInput!]!): [Restaurant]
  updateRestaurant(
    where: RestaurantWhereUniqueInput!
    data: RestaurantUpdateInput!
  ): Restaurant
  updateRestaurants(data: [RestaurantUpdateArgs!]!): [Restaurant]
  deleteRestaurant(where: RestaurantWhereUniqueInput!): Restaurant
  deleteRestaurants(where: [RestaurantWhereUniqueInput!]!): [Restaurant]
  createImage(data: ImageCreateInput!): Image
  createImages(data: [ImageCreateInput!]!): [Image]
  updateImage(where: ImageWhereUniqueInput!, data: ImageUpdateInput!): Image
  updateImages(data: [ImageUpdateArgs!]!): [Image]
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteImages(where: [ImageWhereUniqueInput!]!): [Image]
  createReservation(data: ReservationCreateInput!): Reservation
  createReservations(data: [ReservationCreateInput!]!): [Reservation]
  updateReservation(
    where: ReservationWhereUniqueInput!
    data: ReservationUpdateInput!
  ): Reservation
  updateReservations(data: [ReservationUpdateArgs!]!): [Reservation]
  deleteReservation(where: ReservationWhereUniqueInput!): Reservation
  deleteReservations(where: [ReservationWhereUniqueInput!]!): [Reservation]
  createReview(data: ReviewCreateInput!): Review
  createReviews(data: [ReviewCreateInput!]!): [Review]
  updateReview(where: ReviewWhereUniqueInput!, data: ReviewUpdateInput!): Review
  updateReviews(data: [ReviewUpdateArgs!]!): [Review]
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteReviews(where: [ReviewWhereUniqueInput!]!): [Review]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  phone: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  restaurants(
    where: RestaurantWhereInput! = {}
    orderBy: [RestaurantOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Restaurant!]
  restaurant(where: RestaurantWhereUniqueInput!): Restaurant
  restaurantsCount(where: RestaurantWhereInput! = {}): Int
  images(
    where: ImageWhereInput! = {}
    orderBy: [ImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Image!]
  image(where: ImageWhereUniqueInput!): Image
  imagesCount(where: ImageWhereInput! = {}): Int
  reservations(
    where: ReservationWhereInput! = {}
    orderBy: [ReservationOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Reservation!]
  reservation(where: ReservationWhereUniqueInput!): Reservation
  reservationsCount(where: ReservationWhereInput! = {}): Int
  reviews(
    where: ReviewWhereInput! = {}
    orderBy: [ReviewOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Review!]
  review(where: ReviewWhereUniqueInput!): Review
  reviewsCount(where: ReviewWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
